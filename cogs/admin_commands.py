import discord
from discord import app_commands 
from discord.ext import commands
from database import database as db
from .shop_views import ShopView 

class AdminCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    shop = app_commands.Group(name="shop", description="C√°c l·ªánh qu·∫£n l√Ω shop role")
    coin = app_commands.Group(name="coin", description="C√°c l·ªánh qu·∫£n l√Ω ti·ªÅn t·ªá")

    async def get_guild_config(self, guild_id: int):
        # helper lay config
        return self.bot.guild_configs.get(str(guild_id))

    @shop.command(name="setup", description="G·ª≠i b·∫£ng ƒëi·ªÅu khi·ªÉn shop v√† t·∫°o thread b·∫£ng x·∫øp h·∫°ng.")
    @app_commands.checks.has_permissions(administrator=True) 
    async def setup_shop(self, interaction: discord.Interaction): 
        await interaction.response.defer(ephemeral=True)
        
        guild_id = interaction.guild.id
        guild_config = await self.get_guild_config(guild_id)
        
        if not guild_config:
            return await interaction.followup.send("‚ö†Ô∏è C·∫•u h√¨nh cho server n√†y ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong database.", ephemeral=True)

        channel_id = guild_config.get('shop_channel_id')
        if not channel_id:
            return await interaction.followup.send(f"‚ö†Ô∏è K√™nh shop cho server n√†y ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong database.", ephemeral=True)
        
        channel = self.bot.get_channel(int(channel_id))
        if not channel:
            return await interaction.followup.send(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√™nh v·ªõi ID `{channel_id}`.", ephemeral=True)
        
        embed_color = discord.Color(int(str(guild_config.get('EMBED_COLOR', '#ff00af')).lstrip('#'), 16))
        messages = guild_config.get('MESSAGES', {})

        embed = discord.Embed(
            title=messages.get('SHOP_EMBED_TITLE', "Shop Role"),
            description=messages.get('SHOP_EMBED_DESCRIPTION', "Ch√†o m·ª´ng"),
            color=embed_color
        )
        
        if guild_config.get('SHOP_EMBED_THUMBNAIL_URL'):
            embed.set_thumbnail(url=guild_config.get('SHOP_EMBED_THUMBNAIL_URL'))

        footer_text = guild_config.get('FOOTER_MESSAGES', {}).get('SHOP_PANEL', 'M·ªçi v·∫•n ƒë·ªÅ xin h√£y ping Rin')
        embed.set_footer(
            text=f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{footer_text}", 
            icon_url=self.bot.user.avatar.url
        )
        
        if guild_config.get('SHOP_EMBED_IMAGE_URL'):
            embed.set_image(url=guild_config.get('SHOP_EMBED_IMAGE_URL'))
        
        view = ShopView(bot=self.bot)

        try:
            panel_message = await channel.send(embed=embed, view=view)
            
            # tao thread bxh
            old_thread_id = guild_config.get('leaderboard_thread_id')
            
            try:
                # khoa thread cu
                if old_thread_id:
                    old_thread = self.bot.get_channel(int(old_thread_id))
                    if old_thread:
                        await old_thread.edit(archived=True, locked=True)
            except Exception:
                pass 

            leaderboard_thread = await panel_message.create_thread(name="üèÜ B·∫£ng X·∫øp H·∫°ng Coin üèÜ")
            await leaderboard_thread.send("B·∫£ng x·∫øp h·∫°ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·∫°i ƒë√¢y...")
            
            # luu id vao db
            db.update_guild_config(guild_id, updates={'leaderboard_thread_id': leaderboard_thread.id})
            # reload config
            await self.bot.reload_guild_config(guild_id)
            
            # restart task
            task_cog = self.bot.get_cog('TasksHandler')
            if task_cog:
                task_cog.update_leaderboard.restart()

            await interaction.followup.send(f"‚úÖ ƒê√£ g·ª≠i b·∫£ng ƒëi·ªÅu khi·ªÉn shop t·ªõi {channel.mention} v√† t·∫°o thread BXH.", ephemeral=True)
        except discord.Forbidden:
            await interaction.followup.send(f"‚ùå T√¥i kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn ho·∫∑c t·∫°o thread trong k√™nh {channel.mention}.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}", ephemeral=True)

    @shop.command(name="reload_config", description="T·∫£i l·∫°i c·∫•u h√¨nh t·ª´ database cho server n√†y.")
    @app_commands.checks.has_permissions(administrator=True)
    async def reload_config(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        success = await self.bot.reload_guild_config(interaction.guild.id)
        if success:
            await interaction.followup.send("‚úÖ ƒê√£ t·∫£i l·∫°i th√†nh c√¥ng c·∫•u h√¨nh m·ªõi nh·∫•t t·ª´ database.", ephemeral=True)
        else:
            await interaction.followup.send("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i l·∫°i c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra l·∫°i database.", ephemeral=True)

    @shop.command(name="addrole", description="Th√™m m·ªôt role v√†o shop.")
    @app_commands.describe(role="Role c·∫ßn th√™m", price="Gi√° c·ªßa role") 
    @app_commands.checks.has_permissions(administrator=True)
    async def add_role(self, interaction: discord.Interaction, role: discord.Role, price: int):
        if price < 0:
            return await interaction.response.send_message("‚ö†Ô∏è Gi√° ti·ªÅn kh√¥ng th·ªÉ l√† s·ªë √¢m.", ephemeral=True)

        db.add_role_to_shop(role.id, interaction.guild.id, price)
        await interaction.response.send_message(f"‚úÖ ƒê√£ th√™m role {role.mention} v√†o shop v·ªõi gi√° `{price}` coin.", ephemeral=True)
        
    @shop.command(name="removerole", description="X√≥a m·ªôt role kh·ªèi shop.")
    @app_commands.describe(role="Role c·∫ßn x√≥a")
    @app_commands.checks.has_permissions(administrator=True)
    async def remove_role(self, interaction: discord.Interaction, role: discord.Role):
        db.remove_role_from_shop(role.id, interaction.guild.id)
        await interaction.response.send_message(f"‚úÖ ƒê√£ x√≥a role {role.mention} kh·ªèi shop.", ephemeral=True)

    @coin.command(name="give", description="T·∫∑ng coin cho m·ªôt th√†nh vi√™n.")
    @app_commands.describe(member="Ng∆∞·ªùi nh·∫≠n coin", amount="S·ªë coin mu·ªën t·∫∑ng")
    @app_commands.checks.has_permissions(administrator=True)
    async def give_coin(self, interaction: discord.Interaction, member: discord.Member, amount: int):
        if amount <= 0:
            return await interaction.response.send_message("‚ö†Ô∏è L∆∞·ª£ng coin ph·∫£i l√† s·ªë d∆∞∆°ng.", ephemeral=True)
        
        user_data = db.get_or_create_user(member.id, interaction.guild.id)
        new_balance = user_data['balance'] + amount
        db.update_user_data(member.id, interaction.guild.id, balance=new_balance)
        
        # log gd
        db.log_transaction(
            guild_id=interaction.guild.id,
            user_id=member.id,
            transaction_type='admin_give',
            item_name=f'Admin grant by {interaction.user.name}',
            amount_changed=amount,
            new_balance=new_balance
        )
        
        await interaction.response.send_message(f"‚úÖ ƒê√£ t·∫∑ng `{amount}` coin cho {member.mention}. S·ªë d∆∞ m·ªõi: `{new_balance}` coin.", ephemeral=True)

    @coin.command(name="set", description="Thi·∫øt l·∫≠p s·ªë coin ch√≠nh x√°c cho m·ªôt th√†nh vi√™n.")
    @app_commands.describe(member="Th√†nh vi√™n c·∫ßn set coin", amount="S·ªë coin ch√≠nh x√°c")
    @app_commands.checks.has_permissions(administrator=True)
    async def set_coin(self, interaction: discord.Interaction, member: discord.Member, amount: int):
        if amount < 0:
            return await interaction.response.send_message("‚ö†Ô∏è L∆∞·ª£ng coin kh√¥ng th·ªÉ l√† s·ªë √¢m.", ephemeral=True)

        user_data = db.get_or_create_user(member.id, interaction.guild.id)
        old_balance = user_data['balance']
        amount_changed = amount - old_balance
        
        db.update_user_data(member.id, interaction.guild.id, balance=amount)
        
        # log gd
        db.log_transaction(
            guild_id=interaction.guild.id,
            user_id=member.id,
            transaction_type='admin_set',
            item_name=f'Admin set by {interaction.user.name}',
            amount_changed=amount_changed,
            new_balance=amount
        )
        
        await interaction.response.send_message(f"‚úÖ ƒê√£ ƒë·∫∑t s·ªë d∆∞ c·ªßa {member.mention} th√†nh `{amount}` coin.", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(AdminCommands(bot))